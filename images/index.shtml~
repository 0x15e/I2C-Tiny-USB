<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html><head>
<link rel=stylesheet type="text/css" href="/till/style.css">
<script type="text/javascript"><!--//--><![CDATA[//><!--

startList = function() {
	if (document.all&&document.getElementById) {
		navRoot = document.getElementById("nav");
		for (i=0; i<navRoot.childNodes.length; i++) {
			node = navRoot.childNodes[i];
			if (node.nodeName=="LI") {
				node.onmouseover=function() {
					this.className+=" over";
				}
				node.onmouseout=function() {
					this.className=this.className.replace(" over", "");
				}
			}
		}
	}
}
window.onload=startList;

//--><!]]></script>

</head><body>
<!-- begin of header -->

<div id="container">

<center>
<img src="title.gif">
</center>

<ul id="nav">
  <li>
    <div><a href="">Main</a></div>
     <ul>
	<li><a href="/till/index.html">Home</a></li>
	<li><hr/></li>
	<li><a href="mailto:till@harbaum.org"><img align="bottom" src="/till/icon_email.gif" alt="email" border="0"/>&nbsp;EMail</a></li>
     </ul>
   </li>

  <li>
    <div><a href="">AVR</a></div>
    <ul>
       	<li><a href="/till/tiltstick/index.shtml">TiltStick</a></li>
       	<li><a href="/till/i2c_tiny_usb/index.shtml">i2c-tiny-usb</a></li>
       	<li><a href="/till/ledmatrix/index.html">Ledmatrix</a></li>
       	<li><a href="/till/lcd2usb/index.shtml">LCD2USB</a></li>
       	<li><a href="/till/glcd2usb/index.shtml">GLCD2USB</a></li>
       	<li><a href="/till/spi2cf/index.shtml">Spi2cf</a></li>
       	<li><a href="/till/macavr/index.html">MacAVR</a></li>
       	<li><a href="/till/nanovm/index.shtml">NanoVM</a></li>
<!--       	<li><a href="/till/xu1541/index.shtml">xu1541</a></li> -->
       	<li><hr/></li>
	<li><a href="http://www.bluemp3.de"><img align="bottom" src="/till/icon_world.gif" alt="extern" border="0"/>&nbsp;BlueMP3</a></li>
	<li><a href="http://www.btkit.de"><img align="bottom" src="/till/icon_world.gif" alt="extern" border="0"/>&nbsp;BtKit</a></li>
    </ul>
  </li>
   
  <li>
    <div><a href="">Linux</a></div>
     <ul>
	<li><a href="/till/maemo/index.html">Maemo projects</a></li>
	<li><a href="/till/dvi2par/index.html">DVI2PAR HDMI decoder</a></li>
	<li><a href="/till/n800_usb/index.html">N800 USB howto</a></li>
	<li><a href="/till/twonky/index.html">Twonky</a></li>
	<li><a href="/till/bluegps/index.html">BlueGPS</a></li>
	<li><a href="/till/cnc/index.shtml">Linux CNC</a></li>
	<li><a href="/till/cnc/cx-t100/index.shtml">CX-T100</a></li>
       	<li><hr/></li>
	<li><a href="http://www.bluez.org"><img align="bottom" src="/till/icon_world.gif" alt="extern" border="0"/>&nbsp;BlueZ</a></li>
	<li><a href="http://lcd4linux.bulix.org/"><img align="bottom" src="/till/icon_world.gif" alt="extern" border="0"/>&nbsp;Lcd4Linux</a></li>
     </ul>
   </li>

   <li>
     <div><a href="">Misc</a></div>
     <ul>
	<li><a href="/till/atari/index.html">Atari projects</a></li>
	<li><a href="/till/c64/index.shtml">C64 projects</a></li>
	<li><a href="/till/palm/index.html">Tills Palm Pages</a></li>
	<li><a href="/till/the_maze/index.html">TheMaze</a></li>
       	<li><hr/></li>
	<li><a href="http://glmaze.sf.net"><img align="bottom" src="/till/icon_world.gif" alt="extern" border="0"/>&nbsp;glMaze</a></li>
	<li><a href="http://stonx.sf.net"><img align="bottom" src="/till/icon_world.gif" alt="extern" border="0"/>&nbsp;StonX</a></li>
     </ul>
   </li>
 </ul>
</div>

<p><center>Support this project:
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_xclick">
<input type="hidden" name="business" value="till@harbaum.org">
<input type="hidden" name="item_name" value="Support Tills Open Source Projects">
<input type="hidden" name="item_number" value="1">
<input type="image" src="https://www.paypal.com/images/x-click-but21.gif" border="0" name="submit" alt="Paypal Donation">
</form>
or send me something from my <a href="http://www.amazon.de/registry/wishlist/QO3JUU50I0TL">Amazon wishlist</a>.
</center>
</p>

<!-- end of header -->

<p>Attach any I2C client chip (thermo sensors, AD converter, displays,
relais driver, ...) to your PC via USB ... quick, easy and cheap!
Drivers for Linux, Windows and MacOS available.</p> 

<p>The i2c-tiny-usb project is an open source/open hardware
project. The goal of i2c-tiny-usb is to provide a cheap generic i2c
interface to be attached to the usb. It is meant as a replacement for
those simple and cheap printer port to i2c adapters. A USB solution
has several advantages incl. the built-in power supply and a more
future proof interface. Furthermore no cpu intense bitbanging is
required on the host side. This USB solution even requires less
parts than some printer port solutions.</p>

<p>While the i2c-tiny-usb was developed under and for Linux it also
works under Windows and MacOS X. A windows demo driver and demo
application is included to get you started immediately.</a>

<p>The i2c-tiny-usb project is based on:
<ul>
<li>The <a href="http://www.linux-usb.org/">Linux USB project</a> and the <a hreh="http://www.kernel.org">Linux i2c</a> implementation</li>
<li>The windows driver and test application are based on <a href="http://libusb-win32.sourceforge.net/">the libusb-win32</a></li>
<li><a href="http://www.obdev.at/products/avrusb/index.html">AVR-USB,
a pure software implementation of USB for the AVR
platform</a></li>
<li><a href="http://www.xs4all.nl/~dicks/avr/usbtiny/">USBtiny, another software usb implementation for the AVR</a></li> 
</ul></p>

<h2>Hardware</h2>

<table width="100%">
<tr>
<td width="50%" align="center"><img src="prototype.gif"></td>
<td width="50%" align="center"><img src="final.jpg"></td>
</tr>
<tr>
<td width="50%" align="center"><b>The prototype board including a ds1621 temperature sensor</b></td>
<td width="50%" align="center"><b>The final hardware with the same sensor added</b></td>
</table>

<p>The hardware of the i2c-tiny-usb interface consists of the <a
href="http://www.atmel.com/dyn/products/product_card.asp?part_id=3618">Atmel
AVR ATtiny45 CPU</a>, a cheap and easy to obtain microcontroller with 4
KBytes flash (of which ~2k are used in this application) and 256 Bytes
RAM. The processor is surrounded by few other parts.</p>

<h3>The USB interface</h3>

<p>The USB interface of the i2c-tiny-usb interface is based on a pure
software implementation and uses two pins of the AVR (PB0 and
PB2). This software implementation supports low speed USB only which
is signalled to the PC by resistor R1.</p>

<p>The I2C interface is implemented using a bitbanging approach.  The
hardware supported twi interface of the attiny45 is bound to hardware
pins at the chip that are required for USB operation and can thus not
be used for I2C. The bitbanging I2C interface being used instead may
not be fully I2C compatible and thus not every I2C client chip may
function correctly at this bus. No incompatibilities have been
reported so far. The i2c-tiny-usb provides a software adjustable i2c
clock delay allowing to configure the i2c clock. The default delay
is 10us. Due to additional delays in the i2c bitbanging code this results
in a i2c clock of about 50kHz.</p>

<p>For simplicity reasons all USB transfers are done via the
control endpoint. Since the avr usb library does only support
low speed devices it cannot use bulk transfers which are
specified for high and full speed devices only. Low speed
devices support so called interrupt transfers which are
limited to a preset bandwidth while control transfers can
use any free bandwidth (if there's any at all).</p>

<p>The device therefore uses control transfers for all of its
communication. This requires some additional limitation to
prevent multiple driver software (e.g. the kernel driver and
the libusb based test application) to access the device at
the same time. Under Linux this can be achieved by selecting
certain access request types. This kind of access control may
not be possible under other operating systems.</p>

<h3>Power consumption</h3>

<p>The whole device is a so called bus powered device. This means that
the complete device is powered directly from USB. Therefore the AVR
and one or more I2C client chips are powered from the USB VBUS
signal.</p>

<p>The adapter itself draws less than 10mA and reports this to
the host via its USB descriptors. The device is able to power
I2C client chips as well. But since these chips vary in power
consumption it is not possible to correctly include their
demands into the device descriptors. It's your responsibility
to keep an eye on the total power supply and especially to make
sure that the entire device does not exceed the total USB limit
of 500mA.</p>

<p>It is planned for future firmware versions to make the reported
power consumption software configurable so the value can easily be
adopted to the real power demands of the entire device.</p>

<h3>Kernel driver</h3>

<p>The i2c-tiny-usb is meant to be used with Linux. It comes with a
Linux kernel driver that bridges between the USB and I2C subsystems in
the Linux kernel. The driver then attaches to the USB device and make
the i2c bus available to the i2c subsystem. Thus the entire setup is
transparent to client applications like the <a
href="http://www.lm-sensors.org/">lm_sensors</a> framework and no
special client chip drivers are required. Instead the drivers already
present in the linux kernel are used with the i2c-tiny-usb as
well. With e.g. the ds1621 temperature sensors used in the prototype
the output of sensors may e.g. look like this:</p>

<pre>
ds1621-i2c-2-48
Adapter: i2c-tiny-usb at bus 003 device 017
temp:     +21.50&#176;C (low  = +15.0&#176;C, high = +10.0&#176;C)  ALARM (HIGH)
</pre>

<h3>Schematics and PCB</h3>

<center>
<a href="schematic.gif"><img border="0" src="schematic_small.gif"></a>
</center>

<p>The zener diodes in the schematic are optional. They may be required since
the i2c-tiny-usb is directly powered from the USBs VBUS singnal at 5V. The
USB data lines (D+ and D-) are supposed to be operated at 3.3V only. Some
PCs encounter problems at 5V and limiting the voltage to at most 3.6V 
may help. My prototype lacks these diodes since my PC works fine with 
D+ and D- at 5V.</p>

<p>Resistor R1 is 2k2 instead of 1k5 for the same reason. It is meant to
pullup to 3.3V. Since we are pulling up to 5V the higher resistance is
required.</p>

<p>Below is the final PCB layout. It consists of the USB and I2C parts
only and does not include a I2C client chip. Instead it comes with a
solder area for easy prototyping. I do have some of these PCBs left.
Just drop me an email if you want to buy one (6 EUR per PCB + 4 
EUR shipping). You can easily etch a PCB youself. Since most of the
connections are on the bottom side even a single sided PCB will work.
You'll just have to add the four missing connections using thin wires.</p>

<table width="100%">
<tr>
<td width="33%" align="center"><a href="parts.gif"><img border="0" src="parts_small.gif"></a></td>
<td width="33%" align="center"><a href="top.gif"><img border="0" src="top_small.gif"></a></td>
<td width="33%" align="center"><a href="bottom.gif"><img border="0" src="bottom_small.gif"></a></td>
<td width="33%" align="center"><img border="0" src="pcb.jpg"></td>
</tr>
<td width="33%" align="center">Part placement</td>
<td width="33%" align="center">Top (click for 600 dpi)</td>
<td width="33%" align="center">Bottom (click for 600 dpi)</td>
<td width="33%" align="center">The final PCB</td>
</table>

<p>The USB connector space on the PCB provides two additional holes to
allow an USB cable to be directly and firmly attached to the device
without the use of the USB connector. See the image below for the desired
pinout.</p>

<table width="100%">
<tr>
<td width="50%" align="center"><img src="cable.gif"></td>
<td width="50%" align="center"><img src="cable.jpg"></td>
</tr>
<tr>
<td width="50%" align="center"><b>Direct cable wiring schema ...</b></td>
<td width="50%" align="center"><b>... and in reality (with pcf8574 client).</b></td>
</table>

<h3>Part list</h3>

<p>You can get all parts directly via 
<a href="http://www.reichelt.de/?ACTION=20;AWKID=50364;PROVID=2084">
my i2c-tiny-usb part list at Reichelt</a>. This list includes the
following parts:</p>

<table>
<tr><th>Part</th>
  <th>Qty</th>
  <th>Name</th>
  <th><a href="http://www.reichelt.de">Reichelt Part No.</a></th></tr>
<tr><td>D1, D2</td>
  <td>2</td>
  <td>3.6V zener diode</td>
  <td>ZF 3,6</td></tr>
<tr><td>Q1</td>
  <td>1</td>
  <td>12Mhz crystal, HC49U package</td>
  <td>12,0000-HC49U-S</td></tr>
<tr><td>R1</td>
  <td>1</td>
  <td>2.2 kilo ohm resistor</td>
  <td>1/4W 2,2k</td></tr>
<tr><td>R2, R3</td>
  <td>2</td>
  <td>68 ohm resistor</td>
  <td>1/4W 68</td></tr>
<tr><td>R4, R5</td>
  <td>2</td>
  <td>10 kilo ohm resistor</td>
  <td>1/4W 10k</td></tr>
<tr><td>C1, C2</td>
  <td>2</td>
  <td>22pF ceramic capacitor, 2.54mm</td>
  <td>KERKO 22P</td></tr>
<tr><td>C3</td>
  <td>1</td>
  <td>100nF capacitor, 5.08mm</td>
  <td>X7R-5 100N</td></tr>
<tr><td>C6</td>
  <td>1</td>
  <td>10&mu;F electrolytic capacitor</td>
  <td>RAD 10/35</td></tr>
<tr><td>--</td>
  <td>1</td>
  <td>USB-B print connector</td>
  <td>USB BW</td></tr>
<tr><td>JP1</td>
  <td>1</td>
  <td>4 pin I2C connector</td>
  <td>SL 1X36G 2,54</td></tr>
<tr><td>U$1</td>
  <td>1</td>
  <td>Attiny45 DIP 20Mhz</td>
  <td>ATTINY 45-20PU</td></tr>
<tr><td>--</td>
  <td>1</td>
  <td>socket for U$1</td>
  <td>GS 8P</td></tr>
</table>


<h2>Compiling the firmware</h2>

<p>The ATtiny45 is quite new and thus not all parts of the developement chain
support this chip in their current release versions. The latest 
binutils (linker an assembler) and avrdude (programmer) support the new
chips as well but gcc doesn't. The gcc-4.1.0 has to be patched
to support some AVR cpus incl. the attiny45. Get the latest avr device
patches (patch-newdevices) e.g 
<a href="http://www.freebsd.org/cgi/cvsweb.cgi/ports/devel/avr-gcc/files/">here</a>.
</p>

<h2>Uploading the firmware</h2>

<p>If you are familiar with Atmel programming you probably know what
you are doing. The Makefile in i2c-tiny-usb/firmware/Makefile assumes,
that you are using the <a
href="http://www.atmel.com/dyn/products/tools_card.asp?tool_id=2735">stk500</a>
for programming the attiny45. Since all 6 user configurable pins of
the ATtiny45 are required, the so called high voltage serial
programming (hvsp) mode of the attiny45 has to be used. E.g. the <a
href="http://www.atmel.com/dyn/products/tools_card.asp?tool_id=2735">stk500</a>,
the <a href="http://www.obdev.at/products/avrusb/avrdoper.html">AVR-Doper</a>
and the <a href="http://www.atmel.com/dyn/products/tools_card.asp?tool_id=3891">
AVR Dragon</a> are supporting this mode.</p>

<p>Two versions of the firmware can be compiled which are based on different
USB software implementations for the AVR. If in doubt use the
pre-compiled firmware.hex file distributed with the source code.</p>

<h2>Troubleshooting</h2>

<p>Problem: The device seems to work fine, it is detected correctly
by Linux, but i get various error messages when accessing it from
the test application.</p>

<p>Solution: First make sure that the kernel driver is not
loaded when trying to use the libusb based test application. Since the
kernel driver is part of the main kernel line, it may even be already
installed on your system. Type <tt>rmmod i2c_tiny_usb</tt> to remove it.
Also make sure that you run the test application as the root user
since the standard user may lack the rights to access all aspects
of the i2c_tiny_usb hardware.</p>

<p>Problem: The device is not properly detected. Linux reports an
error like "device not accepting address" in the system log.</p>

<p>Solution: The USB interface is not working at all. Please make sure
that the AVR CPU is correctly flashed <b>and</b> that the fuses are
set correctly. Another reason may be that the zener diodes are too
slow (see next problem).</p>

<p>Problem: The device is not properly detected. Linux reports an
an error like "device descriptor read/all, error -71" in the system log.</p>

<p>Solution: The device is working partly and the USB transfers are
unreliable. This is often cauesed by "slow" high current zener diodes.
On a previous reichelt list i had those wrong zener types. These slow
diodes often seem to have thicker wires than the other parts. You can
just try to remove the zener diodes and the device will work if your
host PC copes with 5V on the USB data lines. Also using a USB hub
between a device without zener diodes and the PC may lead to a working
setup. Otherwise you need faster diodes as a replacement (reichelt
no "zf 3,6" as on the current reichelt list).</p>

<h2>Using the device with a Nokia N800</h2>

<p>The i2c_tiny_usb works at various hosts. One of the most
interesting ones is the <a href="http://www.nseries.com">Nokia
N800</a>. You need
to <a href="http://www.harbaum.org/till/n800_usb">enable USB host mode
capabilities on your N800</a> to make use of the i2c-tiny-usb.</p>

<p><center>
<img border="0" src="n800.jpg">
</center></p>

<p>The demo application (contained in the i2c_tiny_usb archive) can
easily be installed on the N800 from the harbaum.org repository using
the install button below. Once it's installed it can be run from
extras menu. The current version comes with a udev rules file granting
user access to the i2c-tiny-usb and thus not requiring root rights
anymore. Below is a screenshot of my n800 with a ds1621 equipped 
i2c-tiny-usb.</p>

<p><center>
<a href="screenshot.gif"><img border="0" src="screenshot_small.gif"></a>
</center></p>

<p>The <tt>i2c_usb</tt> demo application currently supports two I2C client
chips, a ds1621 temperature sensor and a pcf8574 parallel port driver
(with some LEDs attached to it, so you can see what's
happening). Further chips can easily be supported, just use the source
above ... Happy hacking with the N800!</p>

<p><center>
<a href="http://maemo.org/downloads/product/raw/OS2008/i2c-tiny-usb/?get_installfile"><img border="0" src="ac_install_icon.png"></a>
</center></p>

<h2>Downloads</h2>
<ul>
<li><a href="http://maemo.org/downloads/product/raw/OS2008/i2c-tiny-usb/?get_installfile">Maemo install file for i2c_tiny_usb</a></li>
<li><a href="http://repository.maemo.org/extras/pool/diablo/free/source/i/i2c-tiny-usb/">Maemo extras repository</a> containing the i2c_tiny_usb test application</li>
<li>Version 2009-02-10: <a href="i2c_tiny_usb-2009-02-10.zip">i2c_tiny_usb-2009-02-10.zip</a></li>
  <ul>
  <li>Added eagle source files for schematic and board</li>
  </ul>
<li>Version 2008-11-27: <a href="i2c_tiny_usb-2008-11-27.zip">i2c_tiny_usb-2008-11-27.zip</a></li>
  <ul>
  <li>Fixed mismatching windows libusb dll's and sys' files (by Alan Page)</li>
  </ul>
<li>Version 2007-06-07: <a href="i2c_tiny_usb-2007-06-07.zip">i2c_tiny_usb-2007-06-07.zip</a></li>
  <ul>
  <li>USB version number fix</li>
  </ul>
<li>Version 2007-05-20: <a href="i2c_tiny_usb-2007-05-20.zip">i2c_tiny_usb-2007-05-20.zip</a></li>
  <ul>
  <li>Firmware version 1.05(avrusb)/2.05(usbtiny)</li>
  <li>All parts GPL compliant</li>
  <li>Patch to make usbtiny version work when already plugged in at boot time</li>
  <li>Both USB stacks updated to the latest versions</li>
  <li>The Linux kernel driver is now maintained as part of the <a href="http://www.kernel.org">official Linux kernel</a></li>
  </ul>
<li>Version 2007-01-05: <a href="i2c_tiny_usb-2007-01-05.zip">i2c_tiny_usb-2007-01-05.zip</a></li>
  <ul>
  <li>Firmware version 1.04/2.04 (i2c clock bug fix)</li>
  <li>Test application includes pcf8574 support</li>
  <li>Linux kernel driver for <a href="http://www.robot-electronics.co.uk/shop/Thermal_Array_Sensors2086.htm">tpa81 temperature array sensor</a></li>
  </ul>
<li>Version 2007-01-03: <a href="i2c_tiny_usb-2007-01-03.zip">i2c_tiny_usb-2007-01-03.zip</a></li>
  <ul>
  <li>Bug fixes in usbtiny version</li> 
  <li>Added PCB layout</li> 
  <li>Added Windows libusb driver and ready-to-run test application</li>
  </ul>
<li>Version 2006-12-03: <a href="i2c_tiny_usb-2006-12-03.zip">i2c_tiny_usb-2006-12-03.zip</a></li>
  <ul>
  <li>Added support for <a href="http://www.xs4all.nl/~dicks/avr/usbtiny/">usbtiny</a></li> 
  <li>Firmware version 1.03 (avrusb)/2.03 (usbtiny)</li>
  <li>Device supports i2c clock expansion</li>
  <li>Linux kernel driver for <a href="http://www.robot-electronics.co.uk/shop/Compass_CMPS032004.htm">cmps03 compass module</a></li>
  <li>Updated testapp</li>
  </ul>
<li>Version 2006-11-06: <a href="i2c_tiny_usb-2006-11-06.zip">i2c_tiny_usb-2006-11-06.zip</a></li>
  <ul>
  <li>Firmware version 0.01, the first working version</li>
  <li>Kernel driver 0.9</li>
  </ul>
</ul>

<h2>Links</h2>
<ul>
<li><a href="http://www.obdev.at/products/avrusb/index.html">AVR-USB, 
software USB for the AVR platform</a></li>
<li><a href="http://www.xs4all.nl/~dicks/avr/usbtiny/">USBtiny, another software usb implementation for the AVR</a></li> 
<li><a href="http://libusb.sourceforge.net/">USB user space library libusb</a></li>
<li><a href="http://libusb-win32.sourceforge.net/">Win32 port of libusb</a></li>
<li><a href="http://www.linux-usb.org/">The Linux USB Project</a></li>
<li><a href="http://www.lm-sensors.org/">Lm_sensors - Linux hardware
monitoring</a></li>
</ul>

<h2>User contributions</h2>
<ul>
<li><a href="http://bralug.de/wiki/BLIT2008-Board_mit_i2c-tiny-usb-Firmware">BLIT2008 board being used via the i2c-tiny-usb firmware</a></li>
<li><a href="http://home.arcor.de/henning.paul/gallery/avr/">Henning Pauls i2c-tiny-usb</a></li>
<li><a href="http://www.headfuzz.co.uk/?q=USBtoI2C">Barry Carters feature extended version</a></li>
</ul>

<!-- the footer -->
<hr>
<div id="footer"><center>
<table width="100%"><tr>
<td align="left"><a href="mailto:till@harbaum.org">Till
Harbaum</a>-<a href="http://www.harbaum.org/till/impressum.html">Impressum</a></td>
<td align="right">http://www.harbaum.org/till</td>
</tr></table></center>
</div>
<!-- end of footer -->


</body></html>
